# Lab8 - Detecção de anomalias em transações financeiras
# 1 - Verificação da pasta de trabalho
getwd()
# 2 - Instalando os pacotes para o desenvolvimento do projeto
install.packages("tidyverse")
install.packages("dplyr")
install.packages("solitude")
install.packages("ggplot2")
install.packages("readr")
# 3 - Carregando os pacotes nesta sessão R
library(tidyverse)
library(dplyr)
library(solitude)
library(ggplot2)
library(readr)
# 4 - Carregando os dados históricos
dados_historicos_dsa <- read_csv("dados_historicos.csv")
view(dados_historicos_dsa)
# 5 - Criando o modelo de ML para a detecção de anomalias
?isolationForest
modelo_ml_dsa <- isolationForest$new()
# 6 - Treinando o modelo com o objeto criado
modelo_ml_dsa$fit(dados_historicos_dsa)
# 7 - Fazendo as previsões com o modelo treinado com os dados históricos
previsoes_historico = dados_historicos_dsa %>%
modelo_ml_dsa$predict() %>%
arrange(desc(anomaly_score))
view(previsoes_historico)
# 8 - Impressão do gráfico para visualização de densidade
plot(density(previsoes_historico$anomaly_score))
# 9 - Quanto maior o valor de anomalia, maior a chance do registro ser uma anomalia
# o valor de referência escolhido será 0.62, ou seja, acima deste valor, será identificado como anomalia
indices_historico = previsoes_historico[which(previsoes_historico$anomaly_score > 0.62)]
#10 - Realizando o filtro
anomalias_historico = dados_historicos_dsa[indices_historico$id, ]
normais_historico = dados_historicos_dsa[-indices_historico$id, ]
# 11 - Gerando o gráfico
colors()
ggplot() +
geom_point(data = normais_historico,
mapping = aes(transacao1,transacao2),
col = "skyblue3",
alpha = 0.5) +
geom_point(data = anomalias_historico,
mapping = aes(transacao1,transacao2),
col = "red2",
alpha = 0.8)
# 12 - Carregando novos dados
novos_dados_dsa <- read.csv("novos_dados.csv")
view(novos_dados_dsa)
# 13 - Gerando as previsões dos novos dados
previsoes_novos_dados = modelo_ml_dsa$predict(novos_dados_dsa)
# 14 - Avaliando as anomalias baseadas com a nota de corte (0.62)
indices_novos_dados = previsoes_novos_dados[which(previsoes_novos_dados$anomaly_score > 0.62)]
# 15 - Realizando filtro nos novos dados
anomalias_novos_dados = novos_dados_dsa[indices_novos_dados$id, ]
anomalias_novos_dados = novos_dados_dsa[-indices_novos_dados$id, ]
# 16 - Gerando o gráfico
ggplot() +
geom_point(data = normais_novos_dados,
mapping = aes(transacao1, transacao2),
col = "turquoise3",
alpha = 0.5) +
geom_point(data = anomalias_novos_dados,
mapping = aes(transacao1,transacao2),
col = "tomato3",
alpha = 0.8)
# 15 - Realizando filtro nos novos dados
anomalias_novos_dados = novos_dados_dsa[indices_novos_dados$id, ]
normais_novos_dados = novos_dados_dsa[-indices_novos_dados$id, ]
# 16 - Gerando o gráfico
ggplot() +
geom_point(data = normais_novos_dados,
mapping = aes(transacao1, transacao2),
col = "turquoise3",
alpha = 0.5) +
geom_point(data = anomalias_novos_dados,
mapping = aes(transacao1,transacao2),
col = "tomato3",
alpha = 0.8)
# 17 - Gerando o relatório
# 17.1 - Formatando os valores para a saindo
previsoes_novos_dados <- previsoes_novos_dados %>%
mutate(anomaly_score = round(anomaly_score, 2))
view(previsoes_novos_dados)
# 17.2 - Criando uma nova coluna com base na condição
previsoes_novos_dados <- previsoes_novos_dados %>%
mutate(status = ifelse(anomaly_score > 0.62, "Anomalia", "Normal"))
view(previsoes_novos_dados)
# 17.3 - Gerando o gráfico Boxplot
ggplot(previsoes_novos_dados, aes(x = status, y = anomaly_score, fill = status))+
geom_boxplot() +
labs(title = "Box Plot de Anomalias e Normais",
x = "Status",
y = "Anomaly Score") +
theme_minimal() +
scale_fill_manual(values = c("anomalia" = "red", "normal" = "blue")) +
theme(legend.position = "none")
# 17.4 - Gravando os resultados em um arquivo CVS
write.csv(previsoes_novos_dados, "previsoes_novos_dados.csv")
